<?php
/**
 * @file
 * Inline Msg module uses jQuery to move validation messages above the form elements.
 *
 */

/**
 * Implementation of hook_menu()
 *
 */
function inline_msg_menu() {
  $items = array();
/*
  if (!module_exists('drupal_tweaks')) {
    $items['admin/settings/inline_msg'] = array(
      'title' => 'Inline Msg',
      'description' => t('Move validation messages above form elements.'),
      'page callback' => 'drupal_get_form', 
      'page arguments' => array('inline_msg_admin_settings'), 
      'access arguments' => array('administer inline msg'),
      'file' => 'inline_msg.admin.inc', 
    );
  }
*/

  return $items;
}

/**
 * Implementation of hook_help()
 */
function inline_msg_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/inline_msg':
      $output = '<p>The Inline Messages module uses jQuery to display form messages inline with the form instead of the default behaviour at the top of the page.</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm()
 */
function inline_msg_perm() {
  return array('administer inline msg');
}

/**
 * Implementation of hook_status_messages_alter
 * 
 * See: theme_status_messages_dt()
 */
function inline_msg_status_messages_alter(&$messages) {
  global $inline_msg_ids;
  $js_code[] = "if (Drupal.jsEnabled) { $(document).ready(function(){ ";
  foreach ($messages as $type => $type_messages) {
    $js_code[] = "msg_". $type . ' = $(\'.messages.' . $type . "')"; // get message section by type <ul>
    foreach ($type_messages as $key => $message) { // to each element...
      if (is_array($inline_msg_ids) && array_key_exists($message, $inline_msg_ids)) {
        $id_msg = "inline-msg-" . $inline_msg_ids[$message];
        $js_code[] = "msg_old" . $key . " = $('.messages." . $type . "').find('li').eq(" . $key . ").attr('id', '" . $id_msg . "')"; // apply custom id
        $js_code[] = "id_from" . $key . " = $('.messages." . $type . "').find('li').eq(" . $key . ").attr('id')"; // get id of the message
        $js_code[] = "id_to" . $key . " = $('.messages." . $type . "').find('li').eq(" . $key . ").attr('id').substr(11)"; // get id of destination element
        $js_code[] = "obj_to" . $key . " = $('#'+id_to" . $key . ")"; // get object of destination element
        $js_code2[] = "obj_new" . $key . " = msg_" . $type . ".eq(0).clone()"; // clone old messages
        $js_code2[] = "$('#'+id_to" . $key . ").before( obj_new" . $key . ")"; // and copy all messages object into element
        $js_code2[] = "obj_new" . $key . ".find('li').not('#'+id_from" . $key . ").remove()"; // remove all messages from cloned object exempt the correct one
        $js_code[] = "obj_to" . $key . " = $('#'+id_to" . $key . ")"; // get object of destination element
      }
    }
    $js_code2[] = "$('.messages." . $type . "').eq(0).remove()";
  }
  $js_code2[] = "})}";
  $js_code_all = implode(";\n", array_merge($js_code, $js_code2)) . ';';
  drupal_add_js($js_code_all, 'inline');
}

