<?php
/**
 * @file
 * Inline Msg module uses jQuery to move validation messages above the form elements.
 *
 */

/**
 * Implementation of hook_menu()
 *
 */
function inline_msg_menu() {
  if (!module_exists('drupal_tweaks')) {
    $items['admin/settings/inline_msg'] = array(
      'title' => 'Inline Msg',
      'description' => t('Move validation messages above form elements.'),
      'page callback' => 'drupal_get_form', 
      'page arguments' => array('inline_msg_admin_settings'), 
      'access arguments' => array('administer inline msg'),
      'file' => 'inline_msg.admin.inc', 
    );
  }

  return $items;
}

/**
 * Implementation of hook_help()
 */
function inline_msg_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/inline_msg':
      $output = '<p>The Inline Messages module uses jQuery to display form messages inline with the form instead of the default behaviour at the top of the page.</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm()
 */
function inline_msg_perm() {
  return array('administer inline msg');
}

/**
 * Admin settings page
 */
function inline_msg_admin_settings() {
  // location of jquery scrollto plugin
  $form = array();
  return $form;

  $form['inline_msg_plugin_scrollto'] = array(
    '#type' => 'textfield',
    '#title' => 'Path to jQuery ScrollTo plugin',
    '#description' => t("Relative to your site root. Without a proper path, this module won't do anything."),
    '#default_value' => variable_get('inline_msg_plugin_scrollto', SCROLLTO_PATH_DEFAULT),
  );    
  
  // make sure the jquery scrollto plugin exists
  // if not throw an error & add an error to the textfield
  if (!file_exists(variable_get('inline_msg_plugin_scrollto', SCROLLTO_PATH_DEFAULT))) {
    drupal_set_message(t('The Inline Messages module requires the !download to work', array('!download' => SCROLLTO_DOWNLOAD_LINK)), 'error');
    $form['inline_msg_plugin_scrollto']['#attributes']['class'] = 'error';
  }
  
  // hide the preview button?
  $form['inline_msg_hide_preview'] = array(
    '#type' => 'checkbox',
    '#title' => 'Hide preview button',
    '#default_value' => variable_get('inline_msg_hide_preview', 0),
    '#description' => t("Do you want to hide the preview button for all forms, including modules that aren't enabled below?")
  );

  // add a use any module form
  $form['inline_msg_mforms_all'] = array(
    '#type' => 'checkbox',
    '#title' => 'All module forms',
    '#default_value' => variable_get('inline_msg_mforms_all', 0),
    '#description' => t("Do you want to use display all form messages inline, including any created after these settings have been saved?<br/> Note: This does not include any forms on the administration pages.")
  );  
  
  // get all the modules that implement hook_form()
  $forms = array();
  foreach (module_implements('form') as $module) {
    // ignore some of the core modules
    $ignore = array('filter', 'taxonomy');
    if (!in_array($module, $ignore)) {
      $forms[$module .'_form'] = $module;
    }
  }
  
  // the core contact module doesn't implement hook_form(), so check for it
  if (module_exists('contact')) {
    $forms['contact_mail_page'] = 'contact page';
    $forms['contact_mail_user'] = 'contact user';
  }
  
  // if you use the comment form in a panel 'node comment form'
  // it changes the form id from 'comment_form' to 'panels_comment_form'
  // TODO: test this with other forms added to panels
  if (module_exists('comment') && module_exists('panels')) {
    $forms['panels_comment_form'] = 'comment (panels)';
  }
  
  // sort the forms array alphabetically, preserving keys
  asort($forms);

  // put all the forms collected into checkboxes
  $form['inline_msg_mforms'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Module Forms',
    '#options' => $forms,
    '#default_value' => variable_get('inline_msg_mforms', array()),
    '#description' => t("If 'All module forms' isn't selected, select the forms to display messages inline.")
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter()
 *
 * $form        Nested array of form elements that comprise the form.
 * $form_state  A keyed array containing the current state of the form.
 * $form_id     String representing the name of the form itself. Typically this is the name of the function that generated the form.
 */
function inline_msg_form_alter(&$form, $form_state, $form_id) { 
  $form['#validate'][] = 'inline_msg_validate_form';
  return $form;
}

/**
 * Implementation of #after_build callback
 */
function inline_msg_validate_form($form, &$form_state) {
  //form_set_error('body', 'bla bla bla');
  global $inline_msg_ids;
  if ($form_errors = form_get_errors()) {
    foreach($form_errors as $field => $error_msg) {
      $field_name = (substr($field, 0, 6) == 'field_' && ( $field_data = explode('][', $field)) ) ? $field_data[0] : ( $field_data = $field );
      $field_arr = is_array($field_data) ? $form[$field_name][$field_data[1]] : $form[$field_name];
      if (is_array($field_data) && !empty($field_data[2])) {
        $field_arr = $field_arr[$field_data[2]];
      }
      if ($field_name == 'body') { // check id for body separately
        $field_arr = $form[$field_name . '_field']['body'];
      }
      if ($field_name == 'mail') { // check id for mail separately
        $field_arr = $form['account'][$field_name];
      }
      if ($field_id = $field_arr['#id']) {
        $inline_msg_ids[$error_msg] = $field_id;
      } else {
        watchdog('notice', t('Empty #id in %element element.', array('%element' => $field_name)));
      }
    }
  }
}

/**
 * Implementation of hook_status_messages_alter
 * 
 * See: drupal_tweaks_msg2log_theme_status_messages()
 */
function inline_msg_status_messages_alter(&$messages) {
  global $inline_msg_ids;
  $js_code[] = "if (Drupal.jsEnabled) { $(document).ready(function(){ ";
  foreach ($messages as $type => $type_messages) {
    $js_code[] = "msg_". $type . ' = $(\'.messages.' . $type . "')"; // get message section by type <ul>
    foreach ($type_messages as $key => $message) { // to each element...
      if (array_key_exists($message, $inline_msg_ids)) {
        $id_msg = "inline-msg-" . $inline_msg_ids[$message];
        $js_code[] = "msg_old" . $key . " = $('.messages." . $type . "').find('li').eq(" . $key . ").attr('id', '" . $id_msg . "')"; // apply custom id
        $js_code[] = "id_from" . $key . " = $('.messages." . $type . "').find('li').eq(" . $key . ").attr('id')"; // get id of the message
        $js_code[] = "id_to" . $key . " = $('.messages." . $type . "').find('li').eq(" . $key . ").attr('id').substr(11)"; // get id of destination element
        $js_code[] = "obj_to" . $key . " = $('#'+id_to" . $key . ")"; // get object of destination element
        $js_code2[] = "obj_new" . $key . " = msg_" . $type . ".eq(0).clone()"; // clone old messages
        $js_code2[] = "$('#'+id_to" . $key . ").before( obj_new" . $key . ")"; // and copy all messages object into element
        $js_code2[] = "obj_new" . $key . ".find('li').not('#'+id_from" . $key . ").remove()"; // remove all messages from cloned object exempt the correct one
        $js_code[] = "obj_to" . $key . " = $('#'+id_to" . $key . ")"; // get object of destination element
      }
    }
    $js_code2[] = "$('.messages." . $type . "').eq(0).remove()";
  }
  $js_code2[] = "})}";
  $js_code_all = implode(";\n", array_merge($js_code, $js_code2)) . ';';
  drupal_add_js($js_code_all, 'inline');
}

